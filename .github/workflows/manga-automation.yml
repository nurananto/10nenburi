name: Manga Automation

on:
  # Trigger 1: Detect new files atau perubahan
  push:
    branches:
      - main
    paths:
      - '**/*.jpg'
      - '**/*.jpeg'
      - '**/*.png'
      - '**/*.webp'
      - 'manga-config.json'
  
  # Trigger 2: Schedule SETIAP 1 HARI (jam 00:00 UTC)
  schedule:
    - cron: '0 0 * * *'
  
  # Trigger 3: Manual trigger (untuk testing)
  workflow_dispatch:

permissions:
  contents: write

jobs:
  manga-automation:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'
      
      - name: Generate manga.json and chapters.json with Git timestamps
        run: |
          python3 << 'PYTHON_SCRIPT'
          import os
          import json
          import subprocess
          from datetime import datetime

          print("🚀 Starting manga automation with Git timestamps...")
          print("")

          def get_git_commit_date(folder_path):
              """Get Git commit date for a specific folder"""
              try:
                  result = subprocess.run(
                      ['git', 'log', '-1', '--format=%aI', '--', folder_path],
                      capture_output=True,
                      text=True,
                      check=True
                  )
                  commit_date = result.stdout.strip()
                  
                  if commit_date:
                      print(f"  ✅ {folder_path}: {commit_date}")
                      return commit_date
                  else:
                      result = subprocess.run(
                          ['git', 'log', '--reverse', '--format=%aI', '--', folder_path],
                          capture_output=True,
                          text=True,
                          check=True
                      )
                      first_commit = result.stdout.strip().split('\n')[0]
                      if first_commit:
                          print(f"  ⚠️  {folder_path}: Using first commit: {first_commit}")
                          return first_commit
                      else:
                          fallback = datetime.utcnow().isoformat() + 'Z'
                          print(f"  ⚠️  {folder_path}: No history, using: {fallback}")
                          return fallback
                      
              except Exception as e:
                  print(f"  ❌ Error for {folder_path}: {e}")
                  fallback = datetime.utcnow().isoformat() + 'Z'
                  return fallback

          # Scan directories for chapters
          print("📂 Scanning for chapters...")
          chapters = {}
          chapter_list = []
          
          for item in sorted(os.listdir('.')):
              if os.path.isdir(item) and item.isdigit():
                  chapter_num = int(item)
                  upload_date = get_git_commit_date(item)
                  
                  image_files = [f for f in os.listdir(item) 
                                if f.lower().endswith(('.jpg', '.jpeg', '.png', '.webp'))]
                  
                  chapter_data = {
                      "title": f"Chapter {chapter_num}",
                      "chapter": chapter_num,
                      "uploadDate": upload_date,
                      "totalPages": len(image_files),
                      "locked": False
                  }
                  
                  chapters[str(chapter_num)] = chapter_data
                  chapter_list.append(chapter_data)
                  print(f"  📖 Chapter {chapter_num}: {len(image_files)} pages")
          
          print("")
          print(f"✅ Found {len(chapter_list)} chapters")
          
          chapter_list.sort(key=lambda x: x['chapter'], reverse=True)
          
          last_chapter_update = None
          if chapter_list:
              last_chapter_update = chapter_list[0]['uploadDate']
              print(f"📅 Last chapter update: {last_chapter_update}")
          
          repo_name = os.path.basename(os.getcwd())
          
          manga_data = {
              "manga": {
                  "title": repo_name,
                  "cover": "cover.jpg",
                  "views": 0
              },
              "lastChapterUpdate": last_chapter_update,
              "lastUpdated": datetime.utcnow().isoformat() + 'Z',
              "chapters": chapters
          }
          
          chapters_data = {
              "chapters": chapter_list
          }
          
          print("")
          print("💾 Writing files...")
          with open('manga.json', 'w', encoding='utf-8') as f:
              json.dump(manga_data, f, indent=2, ensure_ascii=False)
          
          with open('chapters.json', 'w', encoding='utf-8') as f:
              json.dump(chapters_data, f, indent=2, ensure_ascii=False)
          
          print("✅ Files created successfully!")
          print("")
          print("=" * 50)
          print(f"Manga: {repo_name}")
          print(f"Chapters: {len(chapter_list)}")
          print(f"Last Update: {last_chapter_update}")
          print("=" * 50)
          PYTHON_SCRIPT
      
      - name: Commit and push changes
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          
          git pull origin main --rebase || true
          git add manga.json chapters.json 2>/dev/null || true
          
          if git diff --staged --quiet; then
            echo "✅ No changes to commit"
          else
            if [ "${{ github.event_name }}" = "push" ]; then
              COMMIT_MSG="📚 Auto-update manga data [skip ci]"
            elif [ "${{ github.event_name }}" = "schedule" ]; then
              COMMIT_MSG="📊 Daily metadata refresh [skip ci]"
            else
              COMMIT_MSG="📄 Manual update [skip ci]"
            fi
            
            git commit -m "$COMMIT_MSG"
            
            max_retries=3
            count=0
            until git push origin main; do
              count=$((count+1))
              if [ $count -eq $max_retries ]; then
                echo "❌ Failed to push after $max_retries attempts"
                exit 1
              fi
              echo "⚠️  Retrying push... (attempt $count/$max_retries)"
              sleep 5
              git pull origin main --rebase
            done
            
            echo "✅ Successfully pushed changes"
          fi
      
      - name: Show Summary
        if: always()
        run: |
          echo ""
          echo "╔════════════════════════════════════════╗"
          echo "║       AUTOMATION SUMMARY               ║"
          echo "╚════════════════════════════════════════╝"
          echo "Trigger: ${{ github.event_name }}"
          echo "Time: $(date)"
          echo ""
          
          if [ -f manga.json ]; then
            echo "📊 Manga Stats:"
            MANGA_TITLE=$(jq -r '.manga.title' manga.json)
            TOTAL_CHAPTERS=$(jq '.chapters | length' manga.json)
            LAST_UPDATE=$(jq -r '.lastChapterUpdate // "N/A"' manga.json)
            
            echo "  Title: $MANGA_TITLE"
            echo "  Total Chapters: $TOTAL_CHAPTERS"
            echo "  Last Update: $LAST_UPDATE"
          fi
          
          echo "╚════════════════════════════════════════╝"
